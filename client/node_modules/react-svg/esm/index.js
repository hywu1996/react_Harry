function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import SVGInjector from '@tanem/svg-injector';
import PropTypes from 'prop-types';
import React from 'react';
import ReactDOMServer from 'react-dom/server';

var ReactSVG =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReactSVG, _React$Component);

  function ReactSVG() {
    var _temp, _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.refCallback = function (container) {
      _this.container = container;
    }, _temp) || _assertThisInitialized(_this);
  }

  var _proto = ReactSVG.prototype;

  _proto.renderSVG = function renderSVG() {
    if (this.container instanceof Node) {
      var _this$props = this.props,
          evalScripts = _this$props.evalScripts,
          each = _this$props.onInjected,
          path = _this$props.path,
          svgClassName = _this$props.svgClassName,
          svgStyle = _this$props.svgStyle;
      var div = document.createElement('div');
      div.innerHTML = ReactDOMServer.renderToStaticMarkup(React.createElement("div", null, React.createElement("div", {
        className: svgClassName,
        "data-src": path,
        style: svgStyle
      })));
      var wrapper = this.container.appendChild(div.firstChild);
      SVGInjector(wrapper.firstChild, {
        each: each,
        evalScripts: evalScripts
      });
    }
  };

  _proto.removeSVG = function removeSVG() {
    if (this.container instanceof Node && this.container.firstChild instanceof Node) {
      this.container.removeChild(this.container.firstChild);
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.renderSVG();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.removeSVG();
    this.renderSVG();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeSVG();
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        evalScripts = _this$props2.evalScripts,
        onInjected = _this$props2.onInjected,
        path = _this$props2.path,
        svgClassName = _this$props2.svgClassName,
        svgStyle = _this$props2.svgStyle,
        rest = _objectWithoutProperties(_this$props2, ["evalScripts", "onInjected", "path", "svgClassName", "svgStyle"]);

    return React.createElement("div", _extends({}, rest, {
      ref: this.refCallback
    }));
  };

  return ReactSVG;
}(React.Component);

ReactSVG.defaultProps = {
  evalScripts: 'never',
  onInjected: function onInjected() {},
  svgClassName: null,
  svgStyle: {}
};
ReactSVG.propTypes = {
  evalScripts: PropTypes.oneOf(['always', 'once', 'never']),
  onInjected: PropTypes.func,
  path: PropTypes.string.isRequired,
  svgClassName: PropTypes.string,
  svgStyle: PropTypes.object
};
export { ReactSVG as default };